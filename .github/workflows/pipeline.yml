name: SonarCloud

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REPOSITORY: ${{ vars.MY_ECR_REPOSITORY }}
  ECS_SERVICE: ${{ vars.MY_ECS_SERVICE }}
  ECS_CLUSTER: ${{ vars.MY_ECS_CLUSTER }}
  ECS_TASK_DEFINITION: ${{ vars.MY_ECS_TASK_DEFINITION }}
  CONTAINER_NAME: ${{ vars.CONTAINER_NAME }}

jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: 21
          distribution: 'zulu'
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=FIAP-SOAT2-2023_tech-challenge-fast-food-system-preparation

  build-and-docker:
    name: Build Image
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Maven Clean and Package
        run: mvn clean package

      - name: Set up JDK 21 for Docker build
        uses: actions/setup-java@v3
        with:
          java-version: 21
          distribution: 'zulu'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        run: |
          docker build --platform=linux/amd64 -t ${{ env.CONTAINER_NAME }} .
          docker tag ${{ env.CONTAINER_NAME }}:latest ${{ env.ECR_REPOSITORY }}
          docker push ${{ env.ECR_REPOSITORY }}
